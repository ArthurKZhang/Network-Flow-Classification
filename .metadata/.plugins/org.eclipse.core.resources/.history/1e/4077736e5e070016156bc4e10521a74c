package pcap.util;

import java.util.Arrays;

public class ContentParser {
	// private byte[] frameHead = new byte[14];
	// public ContentParser
	public static byte[] getIpPackage(byte[] content) {
		byte[] ipPackage = Arrays.copyOfRange(content, 14, content.length);
		return ipPackage;
	}

	public static String[] getSouAddrAndDesAddr(byte[] ipPackage) {
		String[] SouAddrAndDesAddr = new String[2];
		if (isIpv4(ipPackage)) {
			byte[] sourAddrZone = Arrays.copyOfRange(ipPackage, 12, 16);
			byte[] desAddrZone = Arrays.copyOfRange(ipPackage, 16, 20);
			StringBuffer sb = new StringBuffer();
			for (int i = 0; i < 4; i++) {
				sb.append((int) (sourAddrZone[i] & 0xff));
				sb.append(".");
			}
			sb.deleteCharAt(sb.length() - 1);
			SouAddrAndDesAddr[0] = sb.toString();

			sb.delete(0, sb.length() - 1);
			for (int i = 0; i < 4; i++) {
				sb.append((int) (desAddrZone[i] & 0xff));
				sb.append(".");
			}
			sb.deleteCharAt(sb.length() - 1);
			SouAddrAndDesAddr[1] = sb.toString();
		} else {
			byte[] sourAddrZone = Arrays.copyOfRange(ipPackage, 8, 24);
			byte[] desAddrZone = Arrays.copyOfRange(ipPackage, 24, 40);
			StringBuffer sb = new StringBuffer();
			for (int i = 0; i < 8; i++) {
				sb.append(Integer.toHexString((int) sourAddrZone[i * 2]));
				sb.append(Integer.toHexString((int) sourAddrZone[i * 2 + 1]));
				sb.append(":");
			}
			sb.deleteCharAt(sb.length() - 1);
			SouAddrAndDesAddr[0] = sb.toString();

			sb.delete(0, sb.length() - 1);
			for (int i = 0; i < 8; i++) {
				sb.append(Integer.toHexString((int) desAddrZone[i * 2]));
				sb.append(Integer.toHexString((int) desAddrZone[i * 2 + 1]));
				sb.append(":");
			}
			sb.deleteCharAt(sb.length() - 1);
			SouAddrAndDesAddr[1] = sb.toString();
		}
		return SouAddrAndDesAddr;
	}

	private static boolean isIpv4(byte[] content) {

		byte[] versionZone = Arrays.copyOfRange(content, 12, 14);
		ByteArrayUtil.reverseByteArray(versionZone);
		int version = ByteArrayUtil.byteArrayToInt(versionZone);
		if (Integer.toHexString(version).equals("0080"))
			return true;
		return false;
	}
	
	private static int getIPHeaderLength(byte[] ipPackage){
		//ipv4
		byte[] IHL = Arrays.copyOfRange(ipPackage, from, to)//Internet Header Length domain
		return 0;
	}
	/*
	 * for(int i=0;i<4;i++){ sbr.append((int)(content[b]&0xff));
	 * sbr.append("."); }
	 */

	/*
	 * 
	 * //数据帧头
	 * 
	 * typedef struct FramHeader_t { //Pcap捕获的数据帧头 u_int8 DstMAC[6]; //目的MAC地址
	 * u_int8 SrcMAC[6]; //源MAC地址 u_short FrameType; //帧类型 } FramHeader_t;
	 */
}
