package arthur.dao.Mongo;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.bson.Document;

import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;

import arthur.bean.data.FlowFeatureVector;
import arthur.bean.data.IPPacket;
import arthur.bean.data.ThreeTuple;

public class DBHelperTrainVector implements ConfigTrainVector {
//	public static 
	
	public static void createCollection() {
		MongoClient mongoClient = new MongoClient(HOST, PORT);
		MongoDatabase db = mongoClient.getDatabase(DB_NAME);
		try {
			db.createCollection(COLLECTION_NAME);
			System.out.println("Collection--" + COLLECTION_NAME + "--created");
		} catch (Exception e) {
			System.err.println(e.getClass().getName() + ": " + e.getMessage());
		} finally {
			mongoClient.close();
		}
	}
	public static void dropCollection(){
		MongoClient mongoClient = new MongoClient(HOST, PORT);
		MongoDatabase db = mongoClient.getDatabase(DB_NAME);
		db.getCollection(COLLECTION_NAME).drop();
		mongoClient.close();
	}
	public static boolean save(FlowFeatureVector fv, int type) {
		MongoClient mongoClient = new MongoClient(HOST, PORT);
		MongoDatabase mongoDatabase = mongoClient.getDatabase(DB_NAME);
		try {
			MongoCollection<Document> collection = mongoDatabase.getCollection(COLLECTION_NAME);
			Document fVector = new Document("type", type)
					.append("vector", fv);
			collection.insertOne(fVector);
			return true;
		} catch (Exception e) {
			System.err.println(e.getClass().getName() + ": " + e.getMessage());
			return false;
		}finally {
			mongoClient.close();
		}
	}
	
	public static Map<String, List<FlowFeatureVector>> queryAll(){
		MongoClient mongoClient = new MongoClient(HOST, PORT);
		MongoDatabase db = mongoClient.getDatabase(DB_NAME);
		FindIterable<Document> findIterable = db.getCollection(COLLECTION_NAME).find();
		MongoCursor<Document> mongoCursor = findIterable.iterator();
		Map<String, List<FlowFeatureVector>> map = new HashMap<String, List<FlowFeatureVector>>();
		while(mongoCursor.hasNext()){  
            Document d = mongoCursor.next();
            int type = d.getInteger("type");
            
         } 
		mongoClient.close();
		return null;
	}
}
